{"version":3,"sources":["app.tsx","index.tsx"],"names":["App","connection","useRef","useState","server","setServer","localStorage","getItem","ip","setIp","login","setLogin","password","setPassword","authorized","setAuthorized","backups","setBackups","error","setError","backupName","setBackupName","serverState","setServerState","backupNameError","setBackupNameError","handleServerChange","useCallback","event","target","value","handleIpChange","setItem","handleLoginChange","handlePasswordChange","handleLogin","preventDefault","current","close","conn","WebSocket","onmessage","message","data","msg","JSON","parse","type","success","console","onopen","send","stringify","onclose","isConfirmOpen","setIsConfirmOpen","action","setAction","handleConfirm","handleClose","checkIsValid","isValid","match","handleSetBackupName","newValue","handleUpdate","handleRestart","handleStop","backupNameRef","handleSave","name","focus","handleRestore","regions","className","noValidate","autoComplete","Paper","TextField","required","label","onChange","Select","MenuItem","Button","variant","color","onClick","Alert","severity","onConfirm","onClose","isOpen","List","ListItem","ListItemIcon","ListItemText","Input","inputRef","placeholder","IconButton","title","map","backup","key","onRestore","BackupRow","isDialogOpen","setDialogOpen","handleDialogClose","handleDialogOpen","button","primary","ConfirmDialog","Dialog","open","showRegion","region","dimension","x","z","RestoreDialog","useNumericInput","xError","handleSetX","validateX","zError","handleSetZ","validateZ","setDimension","handleSetDimension","setRegions","handleAddRegion","parseInt","handleRemoveRegion","id","newRegions","splice","showConfirm","setShowConfirm","handleCancel","DialogTitle","length","onRemove","join","RegionRow","handleRemove","setX","setXError","checkXIsValid","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.4bb6eacf.chunk.js","sourcesContent":["import \"./app.css\";\nimport React, {\n  FC,\n  useCallback,\n  ChangeEventHandler,\n  useState,\n  MouseEventHandler,\n  useRef\n} from \"react\";\nimport {\n  TextField,\n  Button,\n  Paper,\n  List,\n  ListItem,\n  ListItemIcon,\n  ListItemText,\n  Input,\n  IconButton,\n  Dialog,\n  DialogTitle,\n  Select,\n  MenuItem\n} from \"@material-ui/core\";\nimport Description from \"@material-ui/icons/Description\";\nimport SettingsBackupRestore from \"@material-ui/icons/SettingsBackupRestore\";\nimport AddBox from \"@material-ui/icons/AddBox\";\nimport Backup from \"@material-ui/icons/Backup\";\nimport Alert from \"@material-ui/lab/Alert\";\nimport RemoveCircleOutline from \"@material-ui/icons/RemoveCircleOutline\";\n\nexport const App: FC = () => {\n  const connection = useRef<WebSocket>();\n  const [server, setServer] = useState(\"3000\");\n  const [ip, setIp] = useState(localStorage.getItem('ip') || \"127.0.0.1\");\n  const [login, setLogin] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [authorized, setAuthorized] = useState(false);\n  const [backups, setBackups] = useState<string[]>([]);\n  const [error, setError] = useState(\"\");\n  const [backupName, setBackupName] = useState(\"\");\n  const [serverState, setServerState] = useState(\"unknown\");\n  const [backupNameError, setBackupNameError] = useState(false);\n\n  const handleServerChange = useCallback<ChangeEventHandler<{value:unknown}>>(\n    event => {\n      setServer(event.target.value as any);\n    },\n    []\n  );\n  \n  const handleIpChange = useCallback<ChangeEventHandler<HTMLInputElement>>(\n    event => {\n      localStorage.setItem('ip', event.target.value)\n      setIp(event.target.value);\n    },\n    []\n  );\n\n  const handleLoginChange = useCallback<ChangeEventHandler<HTMLInputElement>>(\n    event => {\n      setLogin(event.target.value);\n    },\n    []\n  );\n\n  const handlePasswordChange = useCallback<\n    ChangeEventHandler<HTMLInputElement>\n  >(event => {\n    setPassword(event.target.value);\n  }, []);\n\n  const handleLogin = useCallback<MouseEventHandler<HTMLButtonElement>>(\n    event => {\n      event.preventDefault();\n      if (connection.current) {\n        connection.current.close();\n      }\n      const conn = (connection.current = new WebSocket(`ws://${ip}:${server}/`));\n      conn.onmessage = message => {\n        const { data } = message;\n        if (typeof data !== \"string\") {\n          return;\n        }\n        const msg = JSON.parse(data);\n        // no validation here: client-side problems will be apparent on the client\n        switch (msg.type) {\n          case \"auth\": {\n            if (msg.success) {\n              setError(\"\");\n              setAuthorized(true);\n            } else {\n              setError(\"Wrong user name or password\");\n            }\n            return;\n          }\n          case \"state\": {\n            setServerState(msg.value);\n            return;\n          }\n          case \"backups\": {\n            setBackups(msg.value);\n            return;\n          }\n          default: {\n            console.error(\"Got weird message\", data);\n            return;\n          }\n        }\n      };\n      conn.onopen = () => {\n        conn.send(\n          JSON.stringify({\n            type: \"auth\",\n            login,\n            password\n          })\n        );\n      };\n      conn.onclose = () => {\n        setAuthorized(false);\n      }\n    },\n    [login, password, server, ip], \n  );\n\n  const [isConfirmOpen, setIsConfirmOpen] = useState(false);\n  const [action, setAction] = useState(()=>()=>{});\n  const handleConfirm = useCallback(()=>{\n    action();\n    setIsConfirmOpen(false);\n  },[action]);\n  const handleClose = useCallback(()=>{\n    setIsConfirmOpen(false);\n  },[]);\n\n  const checkIsValid = useCallback((backupName: string) => {\n    const isValid = backupName.match(/^[a-zA-Z0-9_.-]+$/);\n    setBackupNameError(!isValid);\n    return isValid;\n  }, []);\n\n  const handleSetBackupName = useCallback<ChangeEventHandler<HTMLInputElement>>(\n    event => {\n      const newValue = event.target.value;\n      setBackupName(newValue);\n      checkIsValid(newValue);\n    },\n    [checkIsValid]\n  );\n\n  const handleUpdate = useCallback<MouseEventHandler<HTMLButtonElement>>(\n    event => {\n      event.preventDefault();\n      setIsConfirmOpen(true);\n      setAction(()=>()=>{\n        const conn = connection.current;\n        if (!conn) {\n          return;\n        }\n        conn.send(\n          JSON.stringify({\n            type: \"update\"\n          })\n        );\n      })\n    },\n    []\n  );\n\n  const handleRestart = useCallback<MouseEventHandler<HTMLButtonElement>>(\n    event => {\n      event.preventDefault();\n      setIsConfirmOpen(true);\n      setAction(()=>()=>{\n        const conn = connection.current;\n        if (!conn) {\n          return;\n        }\n        conn.send(\n          JSON.stringify({\n            type: \"restart\"\n          })\n        );\n      })\n    },\n    []\n  );\n\n  const handleStop = useCallback<MouseEventHandler<HTMLButtonElement>>(\n    event => {\n      event.preventDefault();\n      setIsConfirmOpen(true);\n      setAction(()=>()=>{\n        const conn = connection.current;\n        if (!conn) {\n          return;\n        }\n        conn.send(\n          JSON.stringify({\n            type: \"stop\"\n          })\n        );\n      });\n    },\n    []\n  );\n\n  const backupNameRef = useRef<HTMLInputElement>(null);\n  const handleSave = useCallback<MouseEventHandler<HTMLButtonElement>>(\n    event => {\n      event.preventDefault();\n      if (!checkIsValid(backupName)) {\n        if (backupNameRef.current) {\n          backupNameRef.current.focus();\n        }\n        return;\n      }\n      setIsConfirmOpen(true);\n      setAction(()=>()=>{\n        const conn = connection.current;\n        if (!conn) {\n          return;\n        }\n        conn.send(\n          JSON.stringify({\n            type: \"save\",\n            name: backupName\n          })\n        );\n      })\n    },\n    [backupName, checkIsValid]\n  );\n\n  const handleRestore = useCallback((name: string, regions: Region[]) => {\n    const conn = connection.current;\n    if (!conn) {\n      return;\n    }\n    conn.send(\n      JSON.stringify({\n        type: \"restore\",\n        name,\n        regions\n      })\n    );\n  }, []);\n\n  return (\n    <div className=\"app\">\n      {authorized ? null : (\n        <form noValidate autoComplete=\"off\">\n          <Paper className=\"app__form\">\n            <TextField\n              className=\"app__input\"\n              required\n              label=\"Ip\"\n              value={ip}\n              onChange={handleIpChange}\n            />\n            <Select className=\"app__input\" required label=\"Server\" value={server} onChange={handleServerChange}>\n              <MenuItem value=\"3000\">Survival</MenuItem>\n              <MenuItem value=\"3001\">Creative</MenuItem>\n              <MenuItem value=\"3002\">Survival Copy</MenuItem>\n            </Select>\n            <TextField\n              className=\"app__input\"\n              required\n              label=\"Login\"\n              value={login}\n              onChange={handleLoginChange}\n            />\n            <TextField\n              className=\"app__input\"\n              required\n              label=\"Password\"\n              type=\"password\"\n              value={password}\n              onChange={handlePasswordChange}\n            />\n            <div className=\"app__button\">\n              <Button\n                type=\"submit\"\n                variant=\"contained\"\n                color=\"primary\"\n                onClick={handleLogin}\n              >\n                Log in\n              </Button>\n            </div>\n          </Paper>\n        </form>\n      )}\n      {error ? (\n        <Alert className=\"app__alert\" severity=\"error\">\n          {error}\n        </Alert>\n      ) : null}\n      {authorized ? (\n        <Paper className=\"app__form\">\n          <div className=\"app__second\">\n            <div className=\"app__button\">\n              <Button\n                className=\"app__button2\"\n                variant=\"contained\"\n                color=\"primary\"\n                onClick={handleUpdate}\n              >\n                Update carpet\n              </Button>\n              <Button\n                className=\"app__button2\"\n                variant=\"contained\"\n                color=\"primary\"\n                onClick={handleRestart}\n              >\n                Restart\n              </Button>\n              <Button\n                className=\"app__button2\"\n                variant=\"contained\"\n                color=\"primary\"\n                onClick={handleStop}\n              >\n                Stop\n              </Button>\n              <ConfirmDialog onConfirm={handleConfirm} onClose={handleClose} isOpen={isConfirmOpen}/>\n              <div className=\"app__server-state\">{serverState}</div>\n            </div>\n            <List>\n              <ListItem>\n                <ListItemIcon>\n                  <AddBox />\n                </ListItemIcon>\n                <ListItemText>\n                  <Input\n                    inputRef={backupNameRef}\n                    placeholder=\"Backup name\"\n                    value={backupName}\n                    error={backupNameError}\n                    onChange={handleSetBackupName}\n                  />\n                </ListItemText>\n                <IconButton title=\"Save backup\" onClick={handleSave}>\n                  <Backup />\n                </IconButton>\n              </ListItem>\n              {backups.map((backup, key) => (\n                <BackupRow\n                  key={key}\n                  backup={backup}\n                  onRestore={handleRestore}\n                />\n              ))}\n            </List>\n          </div>\n        </Paper>\n      ) : null}\n    </div>\n  );\n};\n\ntype BackupRowProps = {\n  backup: string;\n  onRestore: (name: string, regions: Region[]) => void;\n};\n\nconst BackupRow: FC<BackupRowProps> = ({ backup, onRestore }) => {\n  const [isDialogOpen, setDialogOpen] = useState(false);\n  const handleDialogClose = useCallback(() => {\n    setDialogOpen(false);\n  }, []);\n  const handleDialogOpen = useCallback(() => {\n    setDialogOpen(true);\n  }, []);\n  return (\n    <>\n      <ListItem button>\n        <ListItemIcon>\n          <Description />\n        </ListItemIcon>\n        <ListItemText primary={backup} />\n        <IconButton title=\"Restore from backup\" onClick={handleDialogOpen}>\n          <SettingsBackupRestore />\n        </IconButton>\n      </ListItem>\n      <RestoreDialog\n        backup={backup}\n        isOpen={isDialogOpen}\n        onClose={handleDialogClose}\n        onRestore={onRestore}\n      />\n    </>\n  );\n};\n\ntype ConfirmDialogProps = {\n  onClose: () => void;\n  onConfirm: () => void;\n  isOpen: boolean;\n}\n\nconst ConfirmDialog: FC<ConfirmDialogProps> = ({\n  onClose, onConfirm, isOpen\n}) => {\n  return (\n    <Dialog onClose={onClose} open={isOpen} className=\"dialog\">\n      <div className=\"dialog__inner\">\n        <div className=\"dialog__confirm\">\n          <div className=\"dialog__text\">\n            Are you sure?\n          </div>\n          <div className=\"dialog__buttons\">\n            <Button\n              className=\"dialog__yes\"\n              type=\"submit\"\n              variant=\"contained\"\n              color=\"primary\"\n              onClick={onConfirm}\n            >\n              I'm sure\n            </Button>\n            <Button\n              className=\"dialog__no\"\n              variant=\"contained\"\n              onClick={onClose}\n            >\n              Cancel\n            </Button>\n          </div>\n        </div>\n      </div>\n    </Dialog>\n  );\n}\n\ntype DialogProps = {\n  backup: string;\n  isOpen: boolean;\n  onClose: () => void;\n  onRestore: (name: string, regions: Region[]) => void;\n};\n\ntype Dimension = \"overworld\" | \"nether\" | \"end\";\ninterface Region {\n  dimension: Dimension;\n  x: number;\n  z: number;\n}\n\nconst showRegion = (region: Region): string => {\n  const { dimension, x, z } = region;\n  return `${dimension} ${x} ${z}`;\n};\n\nconst RestoreDialog: FC<DialogProps> = ({\n  backup,\n  isOpen,\n  onClose,\n  onRestore\n}) => {\n  const [x, xError, handleSetX, validateX] = useNumericInput();\n  const [z, zError, handleSetZ, validateZ] = useNumericInput();\n\n  const [dimension, setDimension] = useState<Dimension>(\"overworld\");\n  const handleSetDimension = useCallback<\n    ChangeEventHandler<{\n      value: unknown;\n    }>\n  >(event => {\n    setDimension(event.target.value as Dimension);\n  }, []);\n\n  const [regions, setRegions] = useState<Region[]>([]);\n  const handleAddRegion = useCallback(() => {\n    if (!validateX(x) || !validateZ(z)) {\n      return;\n    }\n    setRegions([\n      ...regions,\n      {\n        dimension,\n        x: parseInt(x, 10),\n        z: parseInt(z, 10)\n      }\n    ]);\n  }, [regions, dimension, x, z, validateX, validateZ]);\n\n  const handleRemoveRegion = useCallback(\n    (id: number) => {\n      const newRegions = [...regions];\n      newRegions.splice(id, 1);\n      setRegions(newRegions);\n    },\n    [regions]\n  );\n\n  const [showConfirm, setShowConfirm] = useState(false);\n  const handleRestore = useCallback(() => {\n    onClose();\n    onRestore(backup, regions);\n    setShowConfirm(false);\n  }, [regions, onRestore, onClose, backup]);\n  const handleConfirm = useCallback(() => {\n    setShowConfirm(true);\n  }, []);\n  const handleCancel = useCallback(() => {\n    setShowConfirm(false);\n  }, []);\n\n  return (\n    <Dialog onClose={onClose} open={isOpen} className=\"dialog\">\n      <DialogTitle>Restore backup {backup}</DialogTitle>\n      <List>\n        <ListItem className=\"dialog__row\">\n          <Select value={dimension} onChange={handleSetDimension}>\n            <MenuItem value=\"overworld\">Overworld</MenuItem>\n            <MenuItem value=\"nether\">Nether</MenuItem>\n            <MenuItem value=\"end\">End</MenuItem>\n          </Select>\n          <Input\n            className=\"dialog__input\"\n            placeholder=\"X\"\n            value={x}\n            error={xError}\n            onChange={handleSetX}\n          />\n          <Input\n            className=\"dialog__input\"\n            placeholder=\"Z\"\n            value={z}\n            error={zError}\n            onChange={handleSetZ}\n          />\n          <IconButton title=\"Add\" onClick={handleAddRegion}>\n            <AddBox />\n          </IconButton>\n        </ListItem>\n        {regions.length ? (\n          regions.map((region, key) => (\n            <RegionRow\n              key={key}\n              id={key}\n              region={region}\n              onRemove={handleRemoveRegion}\n            />\n          ))\n        ) : (\n          <ListItem button>\n            <ListItemText primary=\"No specific regions selected. Restore all regions and player files\" />\n          </ListItem>\n        )}\n      </List>\n      <Button\n        className=\"dialog__button\"\n        type=\"submit\"\n        variant=\"contained\"\n        color=\"primary\"\n        onClick={handleConfirm}\n      >\n        Restore\n      </Button>\n      {showConfirm ? (\n        <div className=\"dialog__confirm\">\n          <div className=\"dialog__text\">\n            Restore{\" \"}\n            {regions.length\n              ? regions.map(showRegion).join(\"; \")\n              : \"whole world (with player files etc.)\"}\n            {\"?\"}\n          </div>\n          <div className=\"dialog__buttons\">\n            <Button\n              className=\"dialog__yes\"\n              type=\"submit\"\n              variant=\"contained\"\n              color=\"primary\"\n              onClick={handleRestore}\n            >\n              I'm sure\n            </Button>\n            <Button\n              className=\"dialog__no\"\n              variant=\"contained\"\n              onClick={handleCancel}\n            >\n              Cancel\n            </Button>\n          </div>\n        </div>\n      ) : null}\n    </Dialog>\n  );\n};\n\ntype RegionRowProps = {\n  id: number;\n  region: Region;\n  onRemove: (id: number) => void;\n};\n\nconst RegionRow: FC<RegionRowProps> = ({ id, region, onRemove }) => {\n  const handleRemove = useCallback(() => {\n    onRemove(id);\n  }, [id, onRemove]);\n\n  return (\n    <ListItem button onClick={handleRemove}>\n      <ListItemText primary={showRegion(region)} />\n      <IconButton title=\"Remove\">\n        <RemoveCircleOutline />\n      </IconButton>\n    </ListItem>\n  );\n};\n\nconst useNumericInput = () => {\n  const [x, setX] = useState(\"\");\n  const [xError, setXError] = useState(false);\n\n  const checkXIsValid = useCallback((value: string) => {\n    const isValid = value.match(/^-?[0-9]+$/);\n    setXError(!isValid);\n    return isValid;\n  }, []);\n\n  const handleSetX = useCallback<ChangeEventHandler<HTMLInputElement>>(\n    event => {\n      const newValue = event.target.value;\n      setX(newValue);\n      checkXIsValid(newValue);\n    },\n    [checkXIsValid]\n  );\n\n  return [x, xError, handleSetX, checkXIsValid] as const;\n};\n","import \"./index.css\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { App } from \"./app\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}